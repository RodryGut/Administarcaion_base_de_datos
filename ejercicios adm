--Ejercitacion Writing Queries SQL Server	
--select - where
USE[AdventureWorks]
GO
--1. mostrar los empleados que tienen mas de 90 horas de vacaciones 
SELECT COUNT(vacationHours) AS 'empleados con mas de 90 horas de vacaciones' 
FROM HumanResources.Employee
WHERE VacationHours > 90
--2. mostrar el nombre, precio y precio con iva de los productos fabricados
--3. mostrar los diferentes titulos de trabajo que existen
--4. mostrar todos los posibles colores de productos 
--5. mostrar todos los tipos de pesonas que existen 
--6. mostrar el nombre concatenado con el apellido de las personas cuyo apellido sea johnson
--7. mostrar todos los productos cuyo precio sea inferior a 150$ de color rojo o cuyo precio sea mayor a 500$ de color negro
--partir del año 2000 
--9. mostrar el nombre,nmero de producto, precio de lista y el precio de lista incrementado en un 10% de los productos cuya fecha de fin de venta sea anerior al dia de hoy

--between & in

--10. mostrar todos los porductos cuyo precio de lista este entre 200 y 300
SELECT *	FROM Production.Product
WHERE		ListPrice BETWEEN 200 AND 300
--11. mostrar todos los empleados que nacieron entre 1970 y 1985 
SELECT *
FROM Empleados
WHERE YEAR(FechaNacimiento) BETWEEN 1970 AND 1985;

SELECT * FROM Person.Person
WHERE LastName  BETWEEN '1970-01-01' AND '1985-12-31'
--12. mostrar los codigos de venta y producto,cantidad de venta y precio unitario de los articulos 750,753 y 770 
SELECT *	 FROM empleados
WHERE		 fechaNacimiento BETWEEN '1970-01-01' AND '1985-12-31'
--13. mostrar todos los porductos cuyo color sea verde, blanco y azul 
--14. mostrar el la fecha,nuero de version y subtotal de las ventas efectuadas en los años 2005 y 2006 

--like

--15. mostrar el nombre, precio y color de los accesorios para asientos de las bicicletas cuyo precio sea  mayor a 100 pesos
--16. mostrar las bicicletas de montaña que  cuestan entre $1000 y $1200
use [AdventureWorks]
select	* 
from	Production.Product
where	ProductNumber like 'bk%' 
and		ListPrice between 1000 and 1200
--17. mostrar los nombre de los productos que tengan cualquier combinacion de ‘mountain bike’
--18. mostrar las personas que su nombre empiece con la letra y 
--19. mostrar las personas que la segunda letra de su apellido es una s 
--20. mostrar el nombre concatenado con el apellido de las personas cuyo apellido tengan terminacion española (ez)
--21. mostrar los nombres de los productos que su nombre termine en un numero 
--22. mostrar las personas cuyo  nombre tenga una c o c como primer caracter, cualquier otro como segundo caracter, ni d ni d ni f ni g como tercer caracter, cualquiera entre j y r o entre s y w como cuarto caracter y el resto sin restricciones 
use [AdventureWorks]
go
SELECT distinct FirstName as Persona
from Person.Person
where FirstName like '[c,C]_[^dDfg][-r,s-w]%'

--order by

--23. mostrar las personas ordernadas primero por su apellido y luego por su nombre
--24. mostrar cinco productos mas caros y su nombre ordenado en forma alfabetica
select		top 5 *
from		Production.Product
order by	ListPrice desc, Name

--funciones de agrupacion

--25. mostrar la fecha mas reciente de venta

SELECT MAX(orderDate)[fecha mas recientes]
FROM sales.SalesOrderHeader

select *
from		Sales.SalesOrderHeader
where		OrderDate = (select Max(OrderDate)
			from sale
--26. mostrar el precio mas barato de todas las bicicletas 
select	min(ListPrice) 
from	Production.Product
where	ProductNumber like 'bk%'
--27. mostrar la fecha de nacimiento del empleado mas joven 

--null

--28. mostrar los representantes de ventas (vendedores) que no tienen definido el numero de territorio
select	*
from	Sales.SalesPerson
where	TerritoryID is null
--29. mostrar el peso promedio de todos los articulos. si el peso no estuviese definido, reemplazar por cero
select		avg(isnull(Weight,0))
from		Production.Product

--group by

--30. mostrar el codigo de subcategoria y el precio del producto mas barato de cada una de ellas 
--31. mostrar los productos y la cantidad total vendida de cada uno de ellos
select		ProductID as Producto,
			sum(OrderQty) as 'Cantidad vendida'
from		Sales.SalesOrderDetail
group by	ProductID
order by	2 desc

-- variante con join
select		Name as Producto,
			sum(OrderQty) as 'Cantidad vendida'
from		Sales.SalesOrderDetail sod
inner join	Production.Product p
on			p.ProductID = sod.ProductID
group by	p.Name
order by	2 desc
--32. mostrar los productos y la cantidad total vendida de cada uno de ellos, ordenarlos por mayor cantidad de ventas


--33. mostrar todas las facturas realizadas y el total facturado de cada una de ellas ordenado por numero de factura.
select		ProductID as Producto,
			sum(unitPrice * OrderQty) as 'Total Facturado'
from		Sales.SalesOrderDetail
group by	ProductID
order by	2 desc

--having

--34. mostrar todas las facturas realizadas y el total facturado de cada una de ellas ordenado por nro de factura pero solo de aquellas ordenes superen un total de $10.000 
select		SalesOrderDetailID as [Nro de Factura],
			sum(unitPrice * OrderQty) as 'Total Facturado'
from		Sales.SalesOrderDetail
group by	SalesOrderDetailID
having		sum(unitPrice * OrderQty) > 10000
order by	1
--34BIS. Mostrar todas las facturas realizadas y el total facturado de cada una de ellas ordenado por nro de factura pero solo de aquellas ordenes superen un total de $10.000 
select		p.Name as Producto,
			p.ProductID as Codigo,
			sum(UnitPrice *  OrderQty) 'Total Facturado',
			DATEDIFF(WEEK, p.SellStartDate, p.SellEndDate) as 'Tiempo de Venta en Semanas'
from		Sales.SalesOrderDetail sod
inner join	Production.Product p
on			p.ProductID = sod.ProductID
where		DATEDIFF(WEEK, p.SellStartDate, p.SellEndDate) is not null
group by	p.Name, p.ProductID,DATEDIFF(WEEK, p.SellStartDate, p.SellEndDate) 
having		sum(UnitPrice *  OrderQty) > 10000
order by	4 desc
--35. mostrar la cantidad de facturas que vendieron mas de 20 unidades 
select		ProductID as Producto,
			sum(OrderQty) as 'Cantidad vendida'
from		Sales.SalesOrderDetail
group by	ProductID
having		sum(OrderQty) > 20
order by	2 desc
--36. mostrar las subcategorias de los productos que tienen dos o mas productos que cuestan menos de $150 
--37. mostrar todos los codigos de categorias existentes junto con la cantidad de productos y el precio de lista promediopor cada uno de aquellos productos que cuestan mas de $70 y el precio promedio es mayor a $300
select		ProductSubcategoryID [Categoria de Producto],
			count(ProductID) Cantidad,
			avg(ListPrice) Promedio
from		Production.Product
where		ListPrice > 70
group by	ProductSubcategoryID
having		avg(ListPrice) > 300
order by	1

--compute

--38. mostrar numero de factura, el monto vendido y al final totalizar la facturacion 

--joins

--39.mostrar  los empleados que también son vendedores 
select		e.*
from		HumanResources.Employee e
inner join	Sales.SalesPerson sp
on			e.BusinessEntityID = sp.BusinessEntityID
--40. mostrar  los empleados ordenados alfabeticamente por apellido y por nombre 
select		p.FirstName + ' ' + p.LastName as Empleado    
			,e.*
from		HumanResources.Employee e
inner join	Person.Person p
on			e.BusinessEntityID = p.BusinessEntityID
order by	1
--41. mostrar el codigo de logueo, numero de territorio y sueldo basico de los vendedores 
--42.mostrar los productos que sean ruedas
select		ps.Name as Producto
			,p.*
from		Production.Product p
inner join	Production.ProductSubcategory ps
on			ps.ProductSubcategoryID  = p.ProductSubcategoryID 
where		ps.Name = 'Wheels'
order by	1
--43. mostrar los nombres de los productos que no son bicicletas 
select		ps.Name as Producto
			,p.*
from		Production.Product p
inner join	Production.ProductSubcategory ps
on			ps.ProductSubcategoryID  = p.ProductSubcategoryID 
where		ps.Name not like '%bike%'
order by	1
--44.mostrar los precios de venta de aquellos  productos donde el precio de venta sea inferior al precio de lista recomendado para ese producto ordenados por nombre de producto
select		p.Name as Producto
			,p.ListPrice as [Precio de Lista]
			,sod.UnitPrice as [Precio Unitario]
from		Production.Product p
inner join	Sales.SalesOrderDetail sod
on			p.ProductID = sod.ProductID
where		sod.UnitPrice < p.ListPrice
order by	1

--45. mostrar todos los productos que tengan igual precio. Se deben mostrar de a pares. codigo y nombre de cada uno de los dos productos y el precio de ambos.ordenar por precio en forma descendente 
--46.mostrar todos los productos que tengan igual precio. Se deben mostrar de a pares. codigo y nombre de cada uno de los dos productos y el precio de ambos mayoes a $15

--47.mostrar el nombre de los productos y de los proveedores cuya subcategoria es 15 ordenados por nombre de proveedor 
--48.mostrar todas las personas (nombre y apellido) y en el caso que sean empleados mostrar tambien el login id, sino mostrar null 
--49. mostrar los vendedores (nombre y apellido) y el territorio asignado a c/u(identificador y nombre de territorio). En los casos en que un territorio no tiene vendedores mostrar igual los datos del territorio unicamente sin datos de vendedores
select		p.FirstName + ' ' + p.LastName as Vendedor
			,st.TerritoryID as identificador
			,st.Name as Territorio
from		Sales.SalesTerritory st
left join	Sales.SalesPerson sp
on			st.TerritoryID = sp.TerritoryID
inner join	Person.Person p
on			p.BusinessEntityID = sp.BusinessEntityID

--49 BIS. Mostrar los vendedores (nombre y apellido) y el territorio asignado a c/u(identificador y nombre de territorio). En los casos en que un vendedor no tenga territorio mostrar igual los datos del vendedor unicamente sin datos de territorios
-- tabla ppal: SalesPerson
-- tabla secundaria: SalesTerritory
select		st.TerritoryID 'Identificador de Territorio',
			st.Name as 'Territorio de Venta',
			p.FirstName + ' ' + p.LastName as Vendedor
from		Person.Person p
inner join	Sales.SalesPerson sp
on			p.BusinessEntityID = sp.BusinessEntityID
left join	Sales.SalesTerritory st
on			st.TerritoryID = sp.TerritoryID
where		st.TerritoryID is null
--50.mostrar el producto cartesiano ente la tabla de vendedores cuyo numero de identificacion de negocio sea 280 y el territorio de venta sea el de francia 
-----------**********-----
select		sp.BusinessEntityID as [numero de identificacion]
			,st.Name as 'Territorio de venta'
			,sp.*
from		Sales.SalesPerson sp
cross join	Sales.SalesTerritory st
where		st.Name = 'France' and sp.BusinessEntityID = 280


--50 BIS. Mostrar el producto cartesiano ente la tabla de vendedores cuyo numero de identificacion de negocio sea 280 y el territorio de venta sea el de francia 
select		sp.BusinessEntityID as 'Numero de Identificacion',
			st.Name as 'Territorio de Venta',
			p.FirstName + ' ' + p.LastName as Vendedor
from		Sales.SalesPerson sp
inner join	Person.Person p 
on			p.BusinessEntityID = sp.BusinessEntityID
cross join	Sales.SalesTerritory st
where		st.Name = 'France' and sp.BusinessEntityID = 280

use pubs
-- Listar los libros que nunca fueron vendidos
--tabla ppal: titles
--tabla secundaria: sales
select		t.title as libro
			--,s.*
from		titles t 
left join	sales s on t.title_id = s.title_id
where		s.stor_id is null


--subconsultas

--51.listar todos las productos cuyo precio sea inferior al precio promedio de todos los productos 
--52.listar el nombre, precio de lista, precio promedio y diferencia de precios entre cada producto y el valor promedio general
 
--53. mostrar el o  codigos del producto mas caro 
--54. mostrar el producto mas barato de cada subcategoría. mostrar subcaterogia, codigo de producto y el precio de lista mas barato ordenado por subcategoria 

--subconsultas con exists

--55.mostrar los nombres de todos los productos presentes en la subcategoría de ruedas 
--56.mostrar todos los productos que no fueron vendidos
--57. mostrar la cantidad de personas que no son vendedorres 
--58.mostrar todos los vendedores (nombre y apellido) que no tengan asignado un territorio de ventas 

--subconsultas con in y not in

--59. mostrar las ordenes de venta que se hayan facturado en territorio de estado unidos unicamente 'us' 
--60. al ejercicio anterior agregar ordenes de francia e inglaterra 
--61.mostrar los nombres de los diez productos mas caros 
--62.mostrar aquellos productos cuya cantidad de pedidos de venta sea igual o superior a 20 
--63. listar el nombre y apellido de los empleados que tienen un sueldo basico de 5000 pesos 
--no utilizar relaciones  para su resolucion 

--subconsultas con all y any

--64.mostrar los nombres de todos los productos de ruedas que fabrica adventure works cycles 
--65.mostrar los clientes ubicados en un territorio no cubierto por ningún vendedor 
--66. listar los productos cuyos precios de venta sean mayores o iguales que el precio de venta máximo 
de cualquier subcategoría de producto.

expresion case

67.listar el nombre de los productos, el nombre de la subcategoria a la que pertenece junto a su categoría de precio. La categoría de precio se calcula de la siguiente manera.
	-si el precio está entre 0 y 1000 la categoría es económica.
	-si la categoría está entre 1000 y 2000, normal 
	-y si su valor es mayor a 2000 la categoría es cara. 
68.tomando el ejercicio anterior, mostrar unicamente aquellos productos cuya categoria sea "economica"

 insert, update y delete

69.aumentar un 20% el precio de lista de todos los productos  
70.aumentar un 20% el precio de lista de los productos del proveedor 1540 
71.agregar un dia de vacaciones a los 10 empleados con mayor antiguedad.
72. eliminar los detalles de compra (purchaseorderdetail) cuyas fechas de vencimiento pertenezcan al tercer trimestre del año 2006 
73.quitar registros de la tabla salespersonquotahistory cuando las ventas del año hasta la fecha almacenadas en la tabla salesperson supere el valor de 2500000

 bulk copy

74. clonar estructura y datos de los campos nombre ,color y precio de lista de la tabla production.product en una tabla llamada productos 
75. clonar solo estructura de los campos identificador ,nombre y apellido de la tabla person.person en una tabla llamada productos 
76.insertar un producto dentro de la tabla productos.tener en cuenta los siguientes datos. el color de producto debe ser rojo, el nombre debe ser "bicicleta mountain bike" y el precio de lista debe ser de 4000 pesos.
77. copiar los registros de la tabla person.person a la tabla personas cuyo identificador este entre 100 y 200 
78. aumentar en un 15% el precio de los pedales de bicicleta 
79. eliminar de las personas cuyo nombre empiecen con la letra m
80. borrar todo el contenido de la tabla productos 
81. borrar todo el contenido de la tabla personas sin utilizar la instrucción delete.

 procedimientos almacenados

82. crear un procedimiento almacenado que dada una determinada inicial ,devuelva codigo, nombre,apellido y direccion decorreo de los empleados cuyo nombre coincida con la inicial ingresada
83. crear un procedimiento almacenado que devuelva los productos que lleven de fabricado la cantidad de dias que le pasemos como parametro
84. crear un procedimiento almacenado que permita actualizar y ver los precios de un determinado 
producto que reciba como parametro
85. armar un procedimineto almacenado que devuelva los proveedores que proporcionan el producto 
especificado por parametro. 
86. crear un procedimiento almacenado que devuelva nombre,apellido y sector del empleado que le 
pasemos como argumento.no es necesario pasar el nombre y apellido exactos al procedimiento.


funciones escalares

87.armar una funcion que devuelva los productos que estan por encima del promedio de precios general
88.armar una función que dado un código de producto devuelva el total de ventas para dicho producto.
luego, mediante una consulta, traer codigo, nombre y total de ventas ordenados por esta ultima columna

funciones de tabla en linea

 89.armar una función que dado un año , devuelva nombre y  apellido de los empleados 
que ingresaron ese año 
90.armar una función que dado el codigo de negocio cliente de la fabrica, devuelva el codigo, nombre y las ventas del año hasta la fecha para cada producto vendido en el negocio ordenadas por esta ultima columna. 

funciones de multisentencia
	
91. crear una  función llmada "ofertas" que reciba un parámetro correspondiente a un precio y nos retorne una tabla con código,nombre, color y precio de todos los productos cuyo precio sea inferior al parámetro ingresado


datetime

92. mostrar la cantidad de horas que transcurrieron desde el comienzo del año
93. mostrar la cantidad de dias transcurridos entre la primer y la ultima venta 




Diagrama Entidad Relacion ( DER ) AdventureWorks





 
